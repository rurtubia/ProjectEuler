/*
 *  This work by Randy Urtubia is licensed under the Creative Commons.
 * 
 *  Attribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made.
 *    You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.
 *  NonCommercial: You may not use the material for commercial purposes.
 *  ShareAlike: If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.
 * 
 *  Based on a work at http://www.notnull.cl.
 *  To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.
 */

package project.euler.problems;

/**
 * Problem 2: Even Fibonacci numbers
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be: 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed 
 * four million, find the sum of the even-valued terms.
 * 
 * @author Randy Urtubia
 */
public class Problem2_EvenFibonacciNumbers {
    
    //TODO: Testing and Docummentation
    
    private int threshold = 50;
    private boolean even = true;
    private int sum = 0;

    public int getThreshold() {
        return threshold;
    }

    public void setThreshold(int threshold) {
        this.threshold = threshold;
    }

    public boolean isEven() {
        return even;
    }

    public void setEven(boolean even) {
        this.even = even;
    }

    public int getSum() {
        return sum;
    }

    public void setSum(int sum) {
      this.sum = sum;
    }
  
    /**
     * Uses the default values.
     * Sets the upper limit of numbers to 4,000,000
     * Uses even numbers.
     */
    public Problem2_EvenFibonacciNumbers() {
    }
    
    /**
     * 
     * @param threshold Specifies the upper number to look for.
     * @param even Specifies whether even numbers will be used (true), or odd numbers (false)
     */
    public Problem2_EvenFibonacciNumbers(int threshold, boolean even){
        this.threshold = threshold;
        this.even = even;
    }
    
    /**
     * implements the logic to calculate a Fibonacci sequence starting at 1 
     * and finishing at the number established as threshold.
     */
    private void fibonacci (){
        int oldInt = 1;  
        int newInt = 1;
        int fibo = newInt;
        /*
         * Method logic:
         *
         * oldInt newInt fibo
         *   1   +   1   = 2
         *   1   +   2   = 3
         *   2   +   3   = 5
         *   3   +   5   = 8
         *   5   +   8   = 13
         *
         */ 
        while (newInt < this.threshold) {
            //Checking the Fibonacci sequence
            //System.out.println(fibo);  
        
            evenOdd(fibo);            
            oldInt = newInt;
            newInt = fibo;
            fibo = newInt + oldInt;
        }    
    }

    /**
     * Based on the boolean "even", triggers the function to sum either even numbers or odd numbers.
     * @param number The number to be evaluated.
     */
    private void evenOdd(int number) {
        if (even) {
            this.sumIfEven(number);
        }
        else {
            this.sumIfOdd(number);
        }
    }
   
    /**
     * Sums even numbers adding them to the field sum.
     * @param number The number to be evaluated.
     */
    private void sumIfEven(int number){
        if (number%2 == 0) {
            sum = sum + number;
        }
    }
    
    /**
     * Sums odd numbers adding them to the field sum.
     * @param number The number to be evaluated.
     */
    private void sumIfOdd(int number){
        if (number%2 != 0){
            sum = sum + number;
        }
    }
    /**
     * Calculates the sum of Fibonacci numbers.
     * @return sum of even or odd Fibonacci numbers below the threshold
     */
    public int calculate(){
        this.fibonacci();
        return sum;
    }
}
